@model QueryLogModel
@section styles{
    <style>
        .white-space-nowrap {
            white-space: nowrap;
        }

        .pure-form select {
            padding-top: 0;
            padding-bottom: 0;
        }
    </style>
}
@section scripts{
    <script>
        const model = Vue.reactive((@Json.Serialize(Model)));
        var app = {
            setup() {
                const colorMap = new Map([
                    ['Warning', 'darkred'],
                    ['Error', 'red'],
                    ['Debug', 'yellow']
                ]);
                const toggle = (item) => {
                    item.show = !item.show;
                };
                const getColor = (item) => {
                    return colorMap.get(item) ?? 'green';
                };
                Vue.onMounted(() => {
                    PubSub.subscribe('notify', (method, data) => {
                        model.items = data.concat(model.items).slice(0, model.pageSize);
                    });
                });
                return {
                    model,
                    toggle,
                    getColor
                }
            }
        };
    </script>
    <script>
        var connectionId = null;
        const connection = new signalR.HubConnectionBuilder().withUrl('@Url.Content("~/hub")').build();
        const connect = () => {
            if (connection.state === signalR.HubConnectionState.Disconnected) {
                connection
                    .start()
                    .then(function () {
                        console.log('signalr connected');
                    })
                    .catch(function (error) {
                        console.error(error);
                        setTimeout(connect, 5000);
                    });
            }
        };
        connection.onclose(function () {
            connect();
        });
        connection.on('connected', function (id) {
            connectionId = id;
            connection.invoke('setTail', model.enalbeTail, connectionId).then(() => {
                console.log(model.enalbeTail);
            });
        });
        connection.on('notify', function (results) {
            PubSub.publish('notify', results);
        });
        connect();
    </script>
}
<form asp-controller="Home" asp-action="Index" method="get" class="pure-form">
    <input name="query" type="text" v-model="model.query" placeholder="InfluxQL" style="width:100%" />
    <br />
    <br />
    <select id="applicationName" name="applicationName" v-model="model.applicationName">
        <option value="">选择应用</option>
        <option v-for="item in model.tags" :value="item">{{item}}</option>
    </select>
    <select id="levle" name="level" v-model="model.level">
        <option value="">选择级别</option>
        <option v-for="item in model.levels" :value="item">{{item}}</option>
    </select>
    <label for="enalbeTail">
        实时
        <input name="enalbeTail" id="enalbeTail" type="checkbox" v-model="model.enalbeTail" :value="model.enalbeTail" />
    </label>
    <label for="enalbeTail">
        数量
        <input name="pageSize" data-role="spinner" data-min-value="0" data-max-value="10000" type="number" v-model="model.pageSize" placeholder="数量" />
    </label>
    <label for="useCustom">
        自定义查询
        <input name="useCustom" id="useCustom" type="checkbox" v-model="model.useCustom" :value="model.useCustom" />
    </label>
    <input type="submit" class="pure-button pure-button-primary" value="查询" style="margin-left:1em;">
</form>
<br />
<table class="pure-table pure-table-striped">
    <thead>
        <tr>
            <th>时间</th>
            <th>应用</th>
            <th>级别</th>
            <th>日志</th>
        </tr>
    </thead>
    <tbody>
        <tr v-for="(item,index) in model.items" v-on:click="toggle(item)">
            <td class="white-space-nowrap">{{new Date(item.time).toLocaleString()}}</td>
            <td class="white-space-nowrap">{{item.applicationName}}</td>
            <td class="white-space-nowrap" :style="{color:getColor(item.level)}">{{item.level}}</td>
            <td>
                {{item.renderedMessage}}
                <div v-if="item.show">
                    {{item}}
                </div>
            </td>
        </tr>
    </tbody>
</table>


