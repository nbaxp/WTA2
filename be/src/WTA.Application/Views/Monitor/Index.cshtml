@using WTA.Application.Extensions
@inject IStringLocalizer localizer
@{
    var action = Url.Action();
}
@section scripts{
    <template id="page">
        <el-row :gutter="20" style="margin-bottom:20px;">
            <el-col :span="24">
                <el-card class="box-card">
                    <template #header>
                        <div class="card-header">
                            <span>操作系统</span>
                        </div>
                    </template>
                    <el-descriptions border direction="vertical" :column="6">
                        <el-descriptions-item label="架构">{{model.osArchitecture}}</el-descriptions-item>
                        <el-descriptions-item label="名称">{{model.osDescription}}</el-descriptions-item>
                        <el-descriptions-item label="用户">{{model.userName}}</el-descriptions-item>
                        <el-descriptions-item label="时间">{{dayjs(model.serverTime).format()}}</el-descriptions-item>
                        <el-descriptions-item label="进程">{{model.processCount}}</el-descriptions-item>
                        <el-descriptions-item label="线程">{{model.threadCount}}</el-descriptions-item>
                    </el-descriptions>
                </el-card>
            </el-col>
        </el-row>
        <el-row :gutter="20" style="margin-bottom:20px;">
            <el-col :span="12">
                <el-card class="box-card">
                    <template #header>
                        <div class="card-header">
                            <span>CPU</span>
                        </div>
                    </template>
                    <el-descriptions border direction="vertical">
                        <el-descriptions-item label="核心数">{{model.processorCount}}</el-descriptions-item>
                        <el-descriptions-item label="使用率">{{persentFormat(model.cpuUsage)}}</el-descriptions-item>
                    </el-descriptions>
                </el-card>
            </el-col>
            <el-col :span="12">
                <el-card class="box-card">
                    <template #header>
                        <div class="card-header">
                            <span>内存</span>
                        </div>
                    </template>
                    <el-descriptions border direction="vertical">
                        <el-descriptions-item label="总内存">{{bytesFormat(model.totalPhysicalMemory)}}</el-descriptions-item>
                        <el-descriptions-item label="已使用">{{persentFormat(model.memoryUsage)}}</el-descriptions-item>
                    </el-descriptions>
                </el-card>
            </el-col>
        </el-row>
        <el-row :gutter="20" style="margin-bottom:20px;">
            <el-col :span="12">
                <el-card class="box-card">
                    <template #header>
                        <div class="card-header">
                            <span>磁盘</span>
                        </div>
                    </template>
                    <el-descriptions border direction="vertical">
                        <el-descriptions-item label="读取">{{model.processorCount}}</el-descriptions-item>
                        <el-descriptions-item label="写入">{{model.cpuLoad}}</el-descriptions-item>
                    </el-descriptions>
                </el-card>
            </el-col>
            <el-col :span="12">
                <el-card class="box-card">
                    <template #header>
                        <div class="card-header">
                            <span>网络</span>
                        </div>
                    </template>
                    <el-descriptions border direction="vertical">
                        <el-descriptions-item label="下载">{{model.speedReceived}}</el-descriptions-item>
                        <el-descriptions-item label="上传">{{model.speedSent}}</el-descriptions-item>
                    </el-descriptions>
                </el-card>
            </el-col>
        </el-row>
        <el-row :gutter="20" style="margin-bottom:20px;">
            <el-col :span="24">
                <el-card class="box-card">
                    <template #header>
                        <div class="card-header">
                            <span>.NET</span>
                        </div>
                    </template>
                    <el-descriptions border direction="vertical">
                        <el-descriptions-item label="名称">{{model.frameworkDescription}}</el-descriptions-item>
                    </el-descriptions>
                </el-card>
            </el-col>
        </el-row>
        <el-row :gutter="20" style="margin-bottom:20px;">
            <el-col :span="24">
                <el-card class="box-card">
                    <template #header>
                        <div class="card-header">
                            <span>应用</span>
                        </div>
                    </template>
                    <el-descriptions border direction="vertical" :column="4">
                        <el-descriptions-item label="架构">{{model.processArchitecture}}</el-descriptions-item>
                        <el-descriptions-item label="进程">{{model.processName}}</el-descriptions-item>
                        <el-descriptions-item label="CPU">{{persentFormat(model.processCpuLoad)}}</el-descriptions-item>
                        <el-descriptions-item label="内存">{{bytesFormat(model.processTotalMemory)}}</el-descriptions-item>
                    </el-descriptions>
                </el-card>
            </el-col>
        </el-row>

    </template>
    <script type="module">
        import { ref, reactive, onMounted, onUnmounted } from 'vue';
        import { ElMessage } from 'element-plus';
        import request from 'request';
        import { useAppStore } from './src/store/index.js';
        import Chart from './src/components/chart.js';
        import {persentFormat,bytesFormat} from './src/utils/index.js';

        window.page = {
            components: { Chart },
            template: '#page',
            setup() {
                const url = ref('@action');
                var model = reactive(@Json.Serialize(Model));
                var schema = reactive(@Json.Serialize(ViewData.ModelMetadata.GetSchema(ViewContext.HttpContext.RequestServices)));
                onMounted(() => {
                    PubSub.subscribe('monitor', (method, data) => {
                        Object.assign(model, data.message);
                    });
                });
                onUnmounted(() => {
                    console.log('onUnmounted');
                });
                return {
                    model,
                    schema,
                    dayjs,
                    persentFormat,
                    bytesFormat
                }
            }
        };
    </script>
}
<!--Shared.Default.cshtml-->
