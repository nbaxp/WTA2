@using WTA.Application.Extensions
@inject IStringLocalizer localizer
@{
    var action = Url.Action();
}
@section scripts{
    <template id="page">
        <el-row :gutter="20" style="margin-bottom:20px;">
            <el-col :span="24">
                <el-card class="box-card">
                    <template #header>
                        <div class="card-header">
                            <span>操作系统</span>
                        </div>
                    </template>
                    <el-descriptions border direction="vertical" :column="4">
                        <el-descriptions-item label="架构">{{model.osArchitecture}}</el-descriptions-item>
                        <el-descriptions-item label="名称">{{model.osDescription}}</el-descriptions-item>
                        <el-descriptions-item label="主机">{{model.hostName}}</el-descriptions-item>
                        <el-descriptions-item label="用户">{{model.userName}}</el-descriptions-item>
                        <el-descriptions-item label="时间">{{dayjs(model.serverTime).format()}}</el-descriptions-item>
                        <el-descriptions-item label="地址">{{model.hostAddresses}}</el-descriptions-item>
                        <el-descriptions-item label="进程">{{model.processCount}}</el-descriptions-item>
                        <el-descriptions-item label="线程">{{model.threadCount}}</el-descriptions-item>
                    </el-descriptions>
                </el-card>
            </el-col>
        </el-row>
        <el-row :gutter="20" style="margin-bottom:20px;">
            <el-col :span="12">
                <el-card class="box-card">
                    <template #header>
                        <div class="card-header">
                            <span>处理器 {{model.processorCount}} </span>
                        </div>
                    </template>
                    <chart :option="cpuModel" height="300px" />
                </el-card>
            </el-col>
            <el-col :span="12">
                <el-card class="box-card">
                    <template #header>
                        <div class="card-header">
                            <span>内存 {{bytesFormat(model.totalPhysicalMemory)}}</span>
                        </div>
                    </template>
                    <chart :option="memoryModel" height="300px" />
                </el-card>
            </el-col>
        </el-row>
        <el-row :gutter="20" style="margin-bottom:20px;">
            <el-col :span="12">
                <el-card class="box-card">
                    <template #header>
                        <div class="card-header">
                            <span>磁盘</span>
                        </div>
                    </template>
                    <el-descriptions border direction="vertical">
                        <el-descriptions-item label="读取">{{bytesFormat(model.diskRead)}}</el-descriptions-item>
                        <el-descriptions-item label="写入">{{bytesFormat(model.diskWrite)}}</el-descriptions-item>
                    </el-descriptions>
                </el-card>
            </el-col>
            <el-col :span="12">
                <el-card class="box-card">
                    <template #header>
                        <div class="card-header">
                            <span>网络</span>
                        </div>
                    </template>
                    <el-descriptions border direction="vertical">
                        <el-descriptions-item label="下载">{{bytesFormat(model.speedReceived)}}</el-descriptions-item>
                        <el-descriptions-item label="上传">{{bytesFormat(model.speedSent)}}</el-descriptions-item>
                    </el-descriptions>
                </el-card>
            </el-col>
        </el-row>
        <el-row :gutter="20" style="margin-bottom:20px;">
            <el-col :span="24">
                <el-card class="box-card">
                    <template #header>
                        <div class="card-header">
                            <span>.NET</span>
                        </div>
                    </template>
                    <el-descriptions border direction="vertical" :column="4">
                        <el-descriptions-item label="名称">{{model.frameworkDescription}}</el-descriptions-item>
                        <el-descriptions-item label="已分配内存">{{bytesFormat(model.gcTotalMemory)}}</el-descriptions-item>
                        <el-descriptions-item label="可回收对象">{{model.finalizationPendingCount}}</el-descriptions-item>
                        <el-descriptions-item label="堆大小">{{bytesFormat(model.heapSizeBytes)}}</el-descriptions-item>
                    </el-descriptions>
                </el-card>
            </el-col>
        </el-row>
        <el-row :gutter="20" style="margin-bottom:20px;">
            <el-col :span="24">
                <el-card class="box-card">
                    <template #header>
                        <div class="card-header">
                            <span>应用</span>
                        </div>
                    </template>
                    <el-descriptions border direction="vertical" :column="5">
                        <el-descriptions-item label="架构">{{model.processArchitecture}}</el-descriptions-item>
                        <el-descriptions-item label="启动时间">{{dayjs(model.processStartTime).format()}}</el-descriptions-item>
                        <el-descriptions-item label="启动位置">{{model.processFileName}}</el-descriptions-item>
                        <el-descriptions-item label="参数">{{model.processArguments}}</el-descriptions-item>
                        <el-descriptions-item label="进程Id">{{model.processId}}</el-descriptions-item>
                        <el-descriptions-item label="进程名称">{{model.processName}}</el-descriptions-item>
                        <el-descriptions-item label="CPU">{{persentFormat(model.processCpuLoad)}}</el-descriptions-item>
                        <el-descriptions-item label="内存">{{bytesFormat(model.processMemory)}}</el-descriptions-item>
                        <el-descriptions-item label="磁盘读写">{{bytesFormat(model.processDiskRead)}} / {{bytesFormat(model.processDiskWrite)}}</el-descriptions-item>
                        <el-descriptions-item label="线程">{{model.processThreadCount}}</el-descriptions-item>
                    </el-descriptions>
                </el-card>
            </el-col>
        </el-row>
    </template>
    <script type="module">
        import { ref, reactive, onMounted, onUnmounted } from 'vue';
        import { ElMessage } from 'element-plus';
        import request from 'request';
        import { useAppStore } from './src/store/index.js';
        import Chart from './src/components/chart.js';
        import { persentFormat, bytesFormat } from './src/utils/index.js';

        window.page = {
            components: { Chart },
            template: '#page',
            setup() {
                const url = ref('@action');
                var model = reactive(@Json.Serialize(Model));
                var schema = reactive(@Json.Serialize(ViewData.ModelMetadata.GetSchema(ViewContext.HttpContext.RequestServices)));

                const cpuModel = reactive({
                    title: {
                        text: '处理器',
                    },
                    xAxis: {
                        type: 'category',
                        data: Object.keys(Array(30).fill()),
                    },
                    yAxis: {
                        type: 'value',
                        min: 0,
                        max: 100
                    },
                    series: [
                        {
                            data: [],
                            type: 'line',
                            smooth: true
                        },
                    ],
                });

                const memoryModel = reactive({
                    title: {
                        text: '内存',
                    },
                    xAxis: {
                        type: 'category',
                        data: Object.keys(Array(30).fill()),
                    },
                    yAxis: {
                        type: 'value',
                        min: 0,
                        max: 100
                    },
                    series: [
                        {
                            data: [],
                            type: 'bar',
                            smooth: true
                        },
                    ],
                });

                onMounted(() => {
                    PubSub.subscribe('monitor', (method, data) => {
                        Object.assign(model, data.message);
                        // cpu
                        if (cpuModel.series[0].data.length > 30) {
                            cpuModel.series[0].data.shift();
                        }
                        cpuModel.title.text = `处理器 ${persentFormat(model.cpuUsage)}`;
                        cpuModel.series[0].data.push(model.cpuUsage * 100);
                        // memory
                        if (memoryModel.series[0].data.length > 30) {
                            memoryModel.series[0].data.shift();
                        }
                        memoryModel.title.text = `内存 ${persentFormat(model.memoryUsage)}`;
                        memoryModel.series[0].data.push(model.memoryUsage * 100);
                    });
                });
                onUnmounted(() => {
                    console.log('onUnmounted');
                });
                return {
                    model,
                    cpuModel,
                    memoryModel,
                    schema,
                    dayjs,
                    persentFormat,
                    bytesFormat
                }
            }
        };
    </script>
}
<!--Shared.Default.cshtml-->
